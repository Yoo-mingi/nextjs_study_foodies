Nextjs.는 페이지의 포장지와 같다.'이론적으로 중첩된 페이지가 있을 수 있다.

Next 서버 컴퓨넌트와 클라이언트 컴포넌트로 나뉜다.
리액트는 기본적으로 클라이언트 사이드 라이브러리이다.
Nextjs는 서버 라이브러리이다.

즉 page.js의 파일은 브라우저에서 실행되지 않는다.
서버에서 동작되어 그 결과값을 클라이언트에 전달하는 방식이다.

초기 페이지 로딩뿐만아니라, nav또한 동일하며 기본적으로 모든 페이지가 서버 사이드에서 동작한다.

서버 컴포넌트를 사용하면 다운로드를 줄여 반응속도를 높이며, 검색엔진에서의 검색도 좋다.
웹 검색 크롤러가 완성된 html 코드를 보기 때문이다.

바닐라js페이지에서 페이지 소스 코드를 보면 그것이 본질적으로 비어있는데, 왜냐하면 모든 내용은 클라이언트측의 도움으로 채워지기 때문이다.
허나 Next.js에서는 모든 내용이 보여진다.

문제점은 훅 사용이 불가능하다.
기본적으로 훅은 현재의 "상태"이며 그 상태는 클라이언트에서 정해지기에, 서버 상에서의 동작이 불가능한 것이다.

*** 정리 ***
모든 페이지는 리액트 컴포넌트는 react를 export하지만, 서버와 클라이언트로 나뉘며,
Next.js는 되도록이면 클라이언트 사이드에서 동작하는 훅의 경우 별도의 컴포넌트로 분리하는 것이 좋다.

useEffect 없이 컴포넌트 안에서 직접 가져오는 것도 가능 하다.
그런데 별도의 백엔드가 있으면 글리 보내는게 맞다...ㅋ;

Server Action와 Async의 경우 use server를 선언하고, 특별한 점은 form요소의 action에 속성을 할당할 수 있다는 것이다.
직접적이든, useFormState를 사용하든 말이다.

useFormStatus 훅은 현재 form이 제출되고 있는지를 판단하고, 이에 따라 UI를 변경할 수 있다.

이것과 연결되어, Next는 꽤나 공격적인 캐싱을 하고 있으며, revalidatePath를 호출하여 데이터가 변경될때마다 캐시를 비우고 다시 가져와야 한다.
배포환경에서는 꽤나 중요하다.
